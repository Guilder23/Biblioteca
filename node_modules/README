
---

# Mi Primer Proyecto Express 🚀

Este es un proyecto de ejemplo para aprender los fundamentos de Express.js, partiendo de una base de conocimiento en Django.

## ¿Qué es este proyecto?

Una aplicación web minimalista construida con **Node.js** y **Express.js** que demuestra la configuración básica de un servidor, el manejo de rutas y el flujo de una petición HTTP. Es el equivalente a un "Hola Mundo" pero estructurado como un proyecto real.

## Prerrequisitos

Antes de ejecutar este proyecto, asegúrate de tener instalado en tu sistema:

*   **Node.js** (versión LTS recomendada): El entorno de ejecución para JavaScript.
*   **npm**: Gestiona los paquetes y dependencias (viene incluido con Node.js).
*   **Un editor de código**: Como Visual Studio Code.

### Verificar la instalación

Abre una terminal y ejecuta:

```bash
node --version
npm --version
```

Si ambos comandos devuelven números de versión, estás listo para continuar.

## Estructura del Proyecto

```
mi-proyecto-express/
├── node_modules/    # Dependencias instaladas (no se versiona)
├── package.json     # Manifest del proyecto y lista de dependencias
├── package-lock.json # Bloquea las versiones exactas de las dependencias
└── app.js           # Punto de entrada de la aplicación
```

## Guía de Instalación y Ejecución

Sigue estos pasos para poner en marcha el servidor:

1.  **Clona o crea la carpeta del proyecto:**
    ```bash
    mkdir mi-proyecto-express
    cd mi-proyecto-express
    ```

2.  **Inicializa el proyecto de Node.js:**
    Este comando crea el archivo `package.json`.
    ```bash
    npm init -y
    ```

3.  **Instala la dependencia Express:**
    ```bash
    npm install express
    ```

4.  **Crea el archivo principal `app.js`** en la raíz del proyecto y pega el siguiente código:

    ```javascript
    const express = require('express');
    const app = express();
    const port = 3000;

    app.get('/', (req, res) => {
      res.send('¡Hola Mundo desde Express!');
    });

    app.listen(port, () => {
      console.log(`Servidor ejecutándose en: http://localhost:${port}`);
    });
    ```

5.  **Ejecuta el servidor:**
    ```bash
    node app.js
    ```

6.  **Abre tu navegador** y ve a `http://localhost:3000`. Deberías ver el mensaje "¡Hola Mundo desde Express!".

## Scripts Útiles (npm scripts)

Para hacer el desarrollo más fluido, puedes agregar estos scripts en el archivo `package.json` dentro de la sección `"scripts"`:

```json
"scripts": {
  "start": "node app.js",
  "dev": "nodemon app.js"
},
```

*   **`npm start`**: Ejecuta la aplicación con Node (para producción).
*   **`npm run dev`**: Ejecuta la aplicación con Nodemon (para desarrollo, con reinicio automático). *Requiere tener `nodemon` instalado globalmente (`npm install -g nodemon`).*

## Mapeo de Conceptos: Django -> Express

Para facilitar la transición, aquí hay una equivalencia de conceptos clave:

| Concepto en Django | Concepto en Express | Ejemplo/Nota |
| :----------------- | :------------------ | :----------- |
| **`runserver`** | **`node app.js`** o **`nodemon`** | Nodemon equivale al auto-reload de Django. |
| **`urls.py`** | **Rutas en `app.js`** | Se definen con `app.get('/', ...)`. |
| **Vista (en `views.py`)** | **Función Manejadora (Handler)** | La función `(req, res) => { ... }` que maneja la petición. |
| **Middleware** | **Middleware** | ¡El concepto es idéntico! Se usa `app.use()`. |
| **`requirements.txt`** | **`package.json`** | Gestiona las dependencias del proyecto. |
| **Entorno Virtual** | **`node_modules/`** | Las dependencias se instalan localmente en esta carpeta. |

## Siguientes Pasos

Ahora que tienes el servidor funcionando, puedes explorar:

1.  **Manejar más rutas y métodos HTTP:** Añadir `app.post`, `app.put`, `app.delete`.
2.  **Usar Routers:** Modularizar las rutas en archivos separados, similar a las "apps" de Django.
3.  **Servir archivos estáticos:** Usar el middleware `express.static`.
4.  **Usar un motor de plantillas:** Integrar EJS o Pug para renderizar HTML en el servidor.
5.  **Crear una API REST:** Manejar datos JSON con `express.json()` y conectarse a una base de datos.

## Recursos Recomendados

*   [Documentación oficial de Express.js](https://expressjs.com/)
*   [Guía de Node.js](https://nodejs.org/es/docs/)